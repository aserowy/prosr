{{- registerFileExtension ".cs" -}}
{{- addType "int32" "int" -}}

// Generated with prosr1 by compiler 0.9, template 0.1

using Microsoft.AspNetCore.SignalR;
using Microsoft.AspNetCore.SignalR.Client;
using System;
using System.Threading.Tasks;

namespace {{resolveOption .Options "namespace"}}
{
{{- range .Ast -}}
	{{- if eq .Token "hub" -}}
		{{template "interface" .}}
		{{template "client" .}}
		{{template "hub" .}}
	{{- else if eq .Token "message" -}}
		{{template "message" .}}
	{{- end -}}
{{- end -}}
}

{{define "interface"}}
	public interface I{{- .Ident -}}Client : I{{- .Ident -}}ClientBase, IDisposable
	{
		Task InitializeHubConnection();
		{{- range .Nodes }}
		{{- if eq .Token "sending" }}
		Task Call{{.Ident -}}OnHub({{- .InputType}} message);
		{{- end}}
		{{- end}}
	}

	public interface I{{- .Ident -}}ClientBase
	{
		{{- range .Nodes | unifyReturnings}}
		Task Recieve{{- .ResponseType -}}To{{- .Target | capitalizeFirstLetter -}}Async({{- .ResponseType}} message);
		{{- end}}
	}
{{end}}
{{define "client"}}
	public abstract class {{.Ident -}}ClientBase : I{{- .Ident -}}Client
	{
		private readonly IHubConnectionBuilder _hubConnectionBuilder;

		private bool _disposed = false;
		private HubConnection _connection;

		protected {{.Ident -}}ClientBase(IHubConnectionBuilder hubConnectionBuilder)
		{
			_hubConnectionBuilder = hubConnectionBuilder;
		}

		protected abstract Uri HubUrl { get; }

		public async Task InitializeHubConnection()
		{
			await GetConnection().ConfigureAwait(false);
		}
		{{range .Nodes | unifyReturnings}}
		public abstract Task Recieve{{- .ResponseType -}}To{{- .Target | capitalizeFirstLetter -}}Async({{- .ResponseType}} message);
		{{end}}

		{{- range .Nodes }}
		{{- if eq .Token "sending" }}
		public async Task Call{{.Ident -}}OnHub({{- .InputType}} message)
		{
			var connection = await GetConnection().ConfigureAwait(false);

			await connection.SendAsync("{{- .Ident -}}", message);
		}
		{{- end}}
		{{- end}}

		private async Task<HubConnection> GetConnection()
		{
			if (_connection == null)
			{
				_connection = await CreateHubConnectionAsync().ConfigureAwait(false);
			}
		
			return _connection;
		}

		private async Task<HubConnection> CreateHubConnectionAsync()
		{
			var connection = _hubConnectionBuilder
				.WithUrl(HubUrl)
				.WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.Zero, TimeSpan.FromSeconds(10) })
				.Build();

			BindClientMethods(ref connection);

			await connection
				.StartAsync()
				.ConfigureAwait(false);

			return connection;
		}

		private HubConnection BindClientMethods(ref HubConnection connection)
		{
			{{- range .Nodes | unifyReturnings}}
			connection.On<{{- .ResponseType -}}>("Recieve{{- .ResponseType -}}To{{- .Target | capitalizeFirstLetter -}}Async", message => Recieve{{- .ResponseType -}}To{{- .Target | capitalizeFirstLetter -}}Async(message));
			{{- end}}

			return connection;
		}

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		protected virtual void Dispose(bool disposing)
		{
			if (!_disposed)
			{
				if (disposing)
				{
					if (!(_connection is null))
					{
						var result = _connection
							.DisposeAsync()
							.Wait(1000);

						if (!result)
						{
							throw new TimeoutException($"Timeout of one second reached while closing hub connection for {HubUrl}!");
						}
					}
				}

				_disposed = true;
			}
		}
		
		~{{.Ident -}}ClientBase()
		{
			Dispose(false);
		}
	}
{{end}}
{{define "hub"}}
	public abstract class {{.Ident -}}Base : Hub<I{{- .Ident -}}ClientBase>
	{
		{{- range .Nodes -}}
			{{- if eq .Token "sending" -}}
				{{template "hubSending" .}}
			{{- else if eq .Token "returning" -}}
				{{template "hubReturning" .}}
			{{- end -}}
		{{- end}}
	}
{{end}}
{{define "hubSending"}}
		public async Task {{.Ident -}}({{- .InputType}} message)
		{
			{{- if eq .Returns nil}}
			await Handle{{- .Ident -}}Async(message).ConfigureAwait(false);
			{{- else}}
			var result = await Handle{{- .Ident -}}Async(message).ConfigureAwait(false);

			await Clients
				.{{- .Returns.Target | capitalizeFirstLetter}}
				.Recieve{{- .Returns.ResponseType -}}To{{- .Returns.Target | capitalizeFirstLetter -}}Async(result)
				.ConfigureAwait(false);
			{{- end}}
		}
		{{if eq .Returns nil}}
		protected abstract Task Handle{{- .Ident -}}Async({{- .InputType}} message);
		{{- else}}
		protected abstract Task<{{- .Returns.ResponseType -}}> Handle{{- .Ident -}}Async({{- .InputType}} message);
		{{- end -}}
{{end}}
{{define "hubReturning"}}
		protected Task Send{{- .ResponseType -}}To{{- .Target | capitalizeFirstLetter -}}Async({{- .ResponseType}} message)
		{
			return Clients.{{- .Target | capitalizeFirstLetter -}}.Recieve{{- .ResponseType -}}To{{- .Target | capitalizeFirstLetter -}}Async(message);
		}
{{end}}
{{define "message"}}
	public class {{.Ident}}
	{
		{{- range .Nodes}}
		public {{.Type | type}} {{.Ident}} { get; set; }
		{{- end}}
	}
{{end}}