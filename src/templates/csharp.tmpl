{{- registerFileExtension ".cs" -}}
{{- addType "int32" "int" -}}

{{- $package := false -}}

// Generated with prosr1 by compiler 0.9, template csharp.tmpl 0.1

using Microsoft.AspNetCore.SignalR;
using Microsoft.AspNetCore.SignalR.Client;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

{{- range .GetDefinitions -}}
	{{- /* Important to resolve the underlying type of bodyDefinition */ -}}
	{{- $child := .GetChild 0 -}}
	{{- if is $child "packageDefinition" -}}
		{{- if $package -}} } {{- end -}}
		{{- $package = true}}

namespace {{$child.FullIdent.GetText}}
{
	{{- else -}}
		{{template "classes" $child}}
	{{- end -}}
{{- end -}}

{{- if $package -}}
}
{{end -}}

{{define "classes"}}
	{{- if is . "hubDefinition" -}}
		{{- template "interface" .}}
		{{- template "client" .}}
		{{- template "hub" .}}
	{{- else if is . "messageDefinition" -}}
		{{- template "message" . -}}
	{{- end -}}
{{end}}
{{define "interface"}}
	public interface I{{- .IDENT.GetText -}}Client : I{{- .IDENT.GetText -}}ClientBase, IDisposable
	{
		Task InitializeHubConnection();
		{{- range .AllActionDefinition }}
		Task Call{{.IDENT.GetText -}}OnHub({{if .FullIdent}}{{- .FullIdent.GetText}} message{{end}});
		{{- end}}
	}

	public interface I{{- .IDENT.GetText -}}ClientBase
	{
		{{- range unifyCallDefinition .}}
		Task {{.IDENT.GetText -}}({{if .FullIdent}}{{- .FullIdent.GetText}} message{{end}});
		{{- end}}
	}
{{end}}
{{define "client"}}
	public abstract class {{.IDENT.GetText -}}ClientBase : I{{- .IDENT.GetText -}}Client
	{
		private readonly IHubConnectionBuilder _hubConnectionBuilder;

		private bool _disposed = false;
		private HubConnection _connection;

		protected {{.IDENT.GetText -}}ClientBase(IHubConnectionBuilder hubConnectionBuilder)
		{
			_hubConnectionBuilder = hubConnectionBuilder;
		}

		protected abstract Uri HubUrl { get; }

		public async Task InitializeHubConnection()
		{
			await GetConnection().ConfigureAwait(false);
		}

		{{- range unifyCallDefinition .}}

		public abstract Task {{.IDENT.GetText -}}({{if .FullIdent}}{{- .FullIdent.GetText}} message{{end}});
		{{- end}}

		{{- range .AllActionDefinition}}

		public async Task Call{{.IDENT.GetText -}}OnHub({{if .FullIdent}}{{- .FullIdent.GetText}} message{{end}})
		{
			var connection = await GetConnection().ConfigureAwait(false);

			await connection
				.SendAsync("{{- .IDENT.GetText -}}"{{if .FullIdent}}, message{{end}})
				.ConfigureAwait(false);
		}
		{{- end}}

		private async Task<HubConnection> GetConnection()
		{
			if (_connection == null)
			{
				_connection = await CreateHubConnectionAsync().ConfigureAwait(false);
			}
		
			return _connection;
		}

		private async Task<HubConnection> CreateHubConnectionAsync()
		{
			var connection = _hubConnectionBuilder
				.WithUrl(HubUrl)
				.WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.Zero, TimeSpan.FromSeconds(10) })
				.Build();

			BindClientMethods(ref connection);

			await connection
				.StartAsync()
				.ConfigureAwait(false);

			return connection;
		}

		private HubConnection BindClientMethods(ref HubConnection connection)
		{
			{{- range unifyCallDefinition .}}
			connection.On{{if .FullIdent}}<{{- .FullIdent.GetText -}}>{{end}}("{{.IDENT.GetText -}}", {{if .FullIdent}}message{{else}}(){{end}} => {{.IDENT.GetText -}}({{- if .FullIdent -}}message{{- end -}}));
			{{- end}}

			return connection;
		}

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		protected virtual void Dispose(bool disposing)
		{
			if (!_disposed)
			{
				if (disposing)
				{
					if (!(_connection is null))
					{
						var result = _connection
							.DisposeAsync()
							.Wait(1000);

						if (!result)
						{
							throw new TimeoutException($"Timeout of one second reached while closing hub connection for {HubUrl}!");
						}
					}
				}

				_disposed = true;
			}
		}
		
		~{{.IDENT.GetText -}}ClientBase()
		{
			Dispose(false);
		}
	}
{{end}}
{{define "hub"}}
	public abstract class {{.IDENT.GetText -}}Base : Hub<I{{- .IDENT.GetText -}}ClientBase>
	{
		{{- range .AllActionDefinition -}}
			{{template "action" .}}
		{{- end}}
		{{- range .AllCallsDefinition -}}
			{{template "calls" .}}
		{{- end}}
	}
{{end}}
{{define "action"}}
		public async Task {{.IDENT.GetText -}}({{if .FullIdent}}{{- .FullIdent.GetText}} message{{end}})
		{
		{{- if .CallsDefinition}}
			{{if .CallsDefinition.FullIdent}}var result = {{end}}await Handle{{- .IDENT.GetText -}}Async({{if .FullIdent}}message{{end}}).ConfigureAwait(false);

			await Clients
				.{{- .CallsDefinition.GetTarget.GetText | capitalizeFirstLetter}}
				.{{- .CallsDefinition.IDENT.GetText -}}({{if .CallsDefinition.FullIdent}}result{{end}})
				.ConfigureAwait(false);
		{{- else}}
			await Handle{{- .IDENT.GetText -}}Async({{if .FullIdent}}message{{end}}).ConfigureAwait(false);
		{{- end}}
		}

		{{if .CallsDefinition -}}
		protected abstract Task{{if .CallsDefinition.FullIdent}}<{{- .CallsDefinition.FullIdent.GetText -}}>{{end}} Handle{{- .IDENT.GetText -}}Async({{if .FullIdent}}{{- .FullIdent.GetText}} message{{end}});
		{{else -}}
		protected abstract Task Handle{{- .IDENT.GetText -}}Async({{if .FullIdent}}{{- .FullIdent.GetText}} message{{end}});
		{{end -}}
{{end}}
{{define "calls"}}
		protected Task Send{{- .IDENT.GetText -}}On{{- .GetTarget.GetText | capitalizeFirstLetter -}}Async({{if .FullIdent}}{{- .FullIdent.GetText}} message{{end}})
		{
			return Clients.{{- .GetTarget.GetText | capitalizeFirstLetter -}}.{{.IDENT.GetText -}}({{if .FullIdent}}message{{end}});
		}
{{end}}
{{define "message"}}
	public class {{.IDENT.GetText}}
	{
		{{- range .AllFieldDefinition}}
		public {{if .REPEATED}}IEnumerable<{{- .TypeIdent.GetText | type -}}>{{else}}{{.TypeIdent.GetText | type}}{{end}} {{.FullIdent.GetText}} { get; set; }
		{{- end}}
	}
{{end}}