{{- registerFileExtension ".cs" -}}
{{- addType "int32" "int" -}}

// Generated with prosr1 by compiler 0.9, template csharp.tmpl 0.1

using Microsoft.AspNetCore.SignalR;
using Microsoft.AspNetCore.SignalR.Client;
using System;
using System.Threading.Tasks;
{{range . -}}
	{{- if eq .Token "package"}}
namespace {{.Ident}}
{
		{{- range .Nodes -}}
			{{template "classes" .}}
		{{- end -}}
}
	{{else -}}
		{{template "classes" .}}
	{{end -}}
{{- end -}}

{{define "classes"}}
	{{- if eq .Token "hub" -}}
		{{- template "interface" .}}
		{{- template "client" .}}
		{{- template "hub" .}}
	{{- else if eq .Token "message" -}}
		{{- template "message" .}}
	{{- end -}}
{{end}}
{{define "interface"}}
	public interface I{{- .Ident -}}Client : I{{- .Ident -}}ClientBase, IDisposable
	{
		Task InitializeHubConnection();
		{{- range .Nodes }}
		{{- if eq .Token "sending" }}
		Task Call{{.Ident -}}OnHub({{if .InputType}}{{- .InputType}} message{{end}});
		{{- end}}
		{{- end}}
	}

	public interface I{{- .Ident -}}ClientBase
	{
		{{- range .Nodes | unifyReturnings}}
		Task {{.Ident -}}On{{- .Target | capitalizeFirstLetter -}}Async({{if .ResponseType}}{{- .ResponseType}} message{{end}});
		{{- end}}
	}
{{end}}
{{define "client"}}
	public abstract class {{.Ident -}}ClientBase : I{{- .Ident -}}Client
	{
		private readonly IHubConnectionBuilder _hubConnectionBuilder;

		private bool _disposed = false;
		private HubConnection _connection;

		protected {{.Ident -}}ClientBase(IHubConnectionBuilder hubConnectionBuilder)
		{
			_hubConnectionBuilder = hubConnectionBuilder;
		}

		protected abstract Uri HubUrl { get; }

		public async Task InitializeHubConnection()
		{
			await GetConnection().ConfigureAwait(false);
		}

		{{- range .Nodes | unifyReturnings}}

		public abstract Task {{.Ident -}}On{{- .Target | capitalizeFirstLetter -}}Async({{- if .ResponseType}}{{- .ResponseType}} message{{end -}});
		{{- end}}

		{{- range .Nodes -}}
		{{- if eq .Token "sending"}}

		public async Task Call{{.Ident -}}OnHub({{if .InputType}}{{- .InputType}} message{{end}})
		{
			var connection = await GetConnection().ConfigureAwait(false);

			await connection
				.SendAsync("{{- .Ident -}}"{{if .InputType}}, message{{end}})
				.ConfigureAwait(false);
		}
		{{- end}}
		{{- end}}

		private async Task<HubConnection> GetConnection()
		{
			if (_connection == null)
			{
				_connection = await CreateHubConnectionAsync().ConfigureAwait(false);
			}
		
			return _connection;
		}

		private async Task<HubConnection> CreateHubConnectionAsync()
		{
			var connection = _hubConnectionBuilder
				.WithUrl(HubUrl)
				.WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.Zero, TimeSpan.FromSeconds(10) })
				.Build();

			BindClientMethods(ref connection);

			await connection
				.StartAsync()
				.ConfigureAwait(false);

			return connection;
		}

		private HubConnection BindClientMethods(ref HubConnection connection)
		{
			{{- range .Nodes | unifyReturnings}}
			connection.On{{if .ResponseType}}<{{- .ResponseType -}}>{{end}}("{{.Ident -}}On{{- .Target | capitalizeFirstLetter -}}Async", {{if .ResponseType}}message{{else}}(){{end}} => {{.Ident -}}On{{- .Target | capitalizeFirstLetter -}}Async({{- if .ResponseType -}}message{{- end -}}));
			{{- end}}

			return connection;
		}

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		protected virtual void Dispose(bool disposing)
		{
			if (!_disposed)
			{
				if (disposing)
				{
					if (!(_connection is null))
					{
						var result = _connection
							.DisposeAsync()
							.Wait(1000);

						if (!result)
						{
							throw new TimeoutException($"Timeout of one second reached while closing hub connection for {HubUrl}!");
						}
					}
				}

				_disposed = true;
			}
		}
		
		~{{.Ident -}}ClientBase()
		{
			Dispose(false);
		}
	}
{{end}}
{{define "hub"}}
	public abstract class {{.Ident -}}Base : Hub<I{{- .Ident -}}ClientBase>
	{
		{{- range .Nodes -}}
			{{- if eq .Token "sending" -}}
				{{template "hubSending" .}}

			{{- else if eq .Token "returning" -}}
				{{template "hubReturning" .}}

			{{- end -}}
		{{- end}}
	}
{{end}}
{{define "hubSending"}}
		public async Task {{.Ident -}}({{if .InputType}}{{- .InputType}} message{{end}})
		{
		{{- if eq .Calls nil}}
			await Handle{{- .Ident -}}Async({{if .InputType}}message{{end}}).ConfigureAwait(false);
		{{- else}}
			{{if .Calls.ResponseType}}var result = {{end}}await Handle{{- .Ident -}}Async({{if .InputType}}message{{end}}).ConfigureAwait(false);

			await Clients
				.{{- .Calls.Target | capitalizeFirstLetter}}
				.{{.Calls.Ident -}}On{{- .Calls.Target | capitalizeFirstLetter -}}Async({{if .Calls.ResponseType}}result{{end}})
				.ConfigureAwait(false);
		{{- end}}
		}

		{{if eq .Calls nil -}}
		protected abstract Task Handle{{- .Ident -}}Async({{if .InputType}}{{- .InputType}} message{{end}});
		{{else -}}
		protected abstract Task{{if .Calls.ResponseType}}<{{- .Calls.ResponseType -}}>{{end}} Handle{{- .Ident -}}Async({{if .InputType}}{{- .InputType}} message{{end}});
		{{end -}}
{{end}}
{{define "hubReturning"}}
		protected Task Send{{- .Ident -}}On{{- .Target | capitalizeFirstLetter -}}Async({{- .ResponseType}} message)
		{
			return Clients.{{- .Target | capitalizeFirstLetter -}}.{{.Ident -}}On{{- .Target | capitalizeFirstLetter -}}Async(message);
		}
{{end}}
{{define "message"}}
	public class {{.Ident}}
	{
		{{- range .Nodes}}
		public {{if .IsRepeated}}IEnumerable<{{- .Type | type -}}>{{else}}{{.Type | type}}{{end}} {{.Ident}} { get; set; }
		{{- end}}
	}
{{end}}